'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _utils = require('./utils');

var _uid = require('./uid');

var uid = _interopRequireWildcard(_uid);

/**
 * Conditional rule for @media, @supports
 *
 * @api public
 */

var ConditionalRule = (function () {
  function ConditionalRule(selector, styles, options) {
    _classCallCheck(this, ConditionalRule);

    this.id = uid.get();
    this.type = 'conditional';
    this.selector = selector;
    this.options = _extends({}, options, { parent: this });
    this.rules = Object.create(null);
    for (var _name in styles) {
      this.createRule(_name, styles[_name]);
    }
  }

  /**
   * A conditional rule always contains child rules.
   *
   * @param {Object} styles
   * @return {Array} rules
   * @api public
   */

  ConditionalRule.prototype.createRule = function createRule(name, style, options) {
    var newOptions = this.options;
    var _newOptions = newOptions;
    var sheet = _newOptions.sheet;
    var jss = _newOptions.jss;

    // We have already a rule in the current style sheet with this name,
    // This new rule is supposed to overwrite the first one, for this we need
    // to ensure it will have the same className/selector.
    var existingRule = sheet && sheet.getRule(name);
    var className = existingRule ? existingRule.className : null;
    if (className || options) {
      newOptions = _extends({}, newOptions, { className: className }, options);
    }
    var rule = (sheet || jss).createRule(name, style, newOptions);
    this.rules[name] = rule;
    return rule;
  };

  /**
   * Generates a CSS string.
   *
   * @return {String}
   * @api public
   */

  ConditionalRule.prototype.toString = function toString() {
    var str = this.selector + ' {\n';
    for (var _name2 in this.rules) {
      var rule = this.rules[_name2];
      if (rule.style && _utils.isEmptyObject(rule.style)) {
        continue;
      }
      var ruleStr = rule.toString({ indentationLevel: 1 });
      str += ruleStr + '\n';
    }
    str += '}';
    return str;
  };

  return ConditionalRule;
})();

exports['default'] = ConditionalRule;
module.exports = exports['default'];